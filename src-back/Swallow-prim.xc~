#include <xs1.h>
#include <print.h>
#include <math.h>
#include <stdlib.h>
#include <platform.h>
#include <time.h>
#include "Swallow-helpers.h"
#include "Swallow-nOS_asm.h"
#include "Swallow-nOS.h"
#include "Swallow-nOS_initialFunctions.h"
#include "Swallow-nOS_client.h"
#include "Swallow-prim.h"
#include "Swallow-prim-checks.h"
#include "swallow_comms.h"

//#define STARTDELAY 625000000 //625 million reference clock cycles of start delay (5 secs)
#define NUM_VISITED_LIMIT 10

void startSync(chanend c_out)
{
	unsigned foo;

	foo = 42;
	c_out <: foo;
}


//Prim's algorithm parameters
void prim_main(chanend c_in, unsigned shouldIRun){

	unsigned foo, child_token;
	channel myChannels[NUM_CHILDREN];
	c_in :> foo;
	
	for(unsigned i=0;i<NUM_CHILDREN;i++){
		myChannels[i] = client_allocateNewLocalChannel(i);
		client_createThread(0,100,i,i+1);
		channelListen(myChannels[i]);
	}

	for(unsigned i=0;i<NUM_CHILDREN;i++){
		channelSendWord(myChannels[i],1);
		child_token = channelReceiveWord(myChannels[i]);
		if(child_token != 1) asm("ecallt r0");
}	
	for(unsigned i=0;i<NUM_CHILDREN;i++){
		channelSendWord(myChannels[i],2);
}
}

void prim_child(unsigned parent_id, unsigned rank){

	par{
		prim_child_root(rank);
		listen_check_wall(parent_id,rank);
	}
}

void xc_listen_check_wall(chanend north_connection,chanend east_connection,chanend south_connection,chanend west_connection,chanend com_channel){

	unsigned in_var;
	unsigned row;
	unsigned column;
	unsigned index;

	unsigned visited[(MAZELENGTH/DIV_DEGREE_Y)][(MAZEWIDTH/DIV_DEGREE_X)];
	unsigned num_walls = (MAZEWIDTH/DIV_DEGREE_X+1) * (MAZELENGTH/DIV_DEGREE_Y) + (MAZELENGTH/DIV_DEGREE_Y + 1) * (MAZELENGTH/DIV_DEGREE_X);
	unsigned walls[(MAZEWIDTH/DIV_DEGREE_X+1) * (MAZELENGTH/DIV_DEGREE_Y) + (MAZELENGTH/DIV_DEGREE_Y + 1) * (MAZELENGTH/DIV_DEGREE_X)];

	
	unsigned num_visited = 0;
/*	unsigned printer[5];

	printer[0] = rank;
	printer[1] = (unsigned) north_connection;
	printer[2] = (unsigned) east_connection;
	printer[3] = (unsigned) south_connection;
	printer[4] = (unsigned) west_connection;

	printmany(5,printer); */


	for(unsigned i=0;i<MAZELENGTH/DIV_DEGREE_Y;i++){
		for(unsigned j=0;j<MAZEWIDTH/DIV_DEGREE_X;j++){
			visited[i][j] = 0;
		}
	}

	for(unsigned i=0;i<num_walls;i++){
		walls[i] = 1;
}

	while(1){

	  select{
	    	case south_connection :> in_var :
			index = in_var;
	    		row = MAZELENGTH/DIV_DEGREE_Y - 1;
	    		column = in_var % (MAZEWIDTH/DIV_DEGREE_X);

			if(visited[row][column] == 1){
					south_connection <: 0;
				}
	    			else{
	    				visited[row][column] = 1;
	    				walls[index] = 0;
	    				south_connection <: 1;
	    			    }
						
			break;
	    	case west_connection :> in_var :
			index = in_var;
	    		in_var = in_var - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
	    		row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    		column = 0;
	    	   	if(visited[row][column] == 1){
					west_connection <: 0;
				}
	    			else{
	    				visited[row][column] = 1;
	    				walls[index] = 0;
	    				west_connection <: 1;
	    			    }
			break;
	    	case north_connection :> in_var :
			index = in_var;
			row = 0;
	    		column = in_var % (MAZEWIDTH/DIV_DEGREE_X);
			if(visited[row][column] == 1){
					north_connection <: 0;
				}
	    			else{
	    				visited[row][column] = 1;
	    				walls[index] = 0;
	    				north_connection <: 1;
	    			    }
	    		break;
	    	case east_connection :> in_var :
			index = in_var;
	    		in_var = in_var - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
	    		row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    		column = MAZEWIDTH/DIV_DEGREE_X - 1;
			if(visited[row][column] == 1){
					east_connection <: 0;
				}
	    			else{
	    				visited[row][column] = 1;
	    				walls[index] = 0;
	    				east_connection <: 1;
	    			    }
	    		break;
		case com_channel :> in_var :
			//local operation
			if(in_var == 1){ 
				com_channel :> index;
				if(index >=((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X)){
					in_var = index - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X + 1);
					if(visited[row][column] == 0 || visited[row][column-1] == 0){
						visited[row][column] = 1;
						visited[row][column-1] = 1;
						walls[index] = 0; 
					}
				}  			
				else{
					in_var = index;
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X);
					if(visited[row][column] == 0 || visited[row-1][column] == 0){
						visited[row][column] = 1;
						visited[row-1][column] = 1;
						walls[index] = 0; 
					}	
				}
				
				
			}
			//neighbor query
			else if(in_var == 2){
			    com_channel :> index;
				if(index >=((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X)){
					in_var = index - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X + 1);
					if(column == 0)
						com_channel <: visited[row][0];
					else
						com_channel <: visited[row][MAZEWIDTH/DIV_DEGREE_X-1];
				}  			
				else{
					in_var = index;
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X);
					if(row == 0)
					        com_channel <: visited[0][column];
					else
						com_channel <: visited[MAZELENGTH/DIV_DEGREE_Y-1][column];
				}

			}
			//update after checking neighbor
			else{
				com_channel :> index;
				if(index >=((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X)){
					in_var = index - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X + 1);
					if(column == 0){
						visited[row][0] = 1;
						walls[index] = 0;
					}
					else{
						visited[row][MAZEWIDTH/DIV_DEGREE_X-1] = 1;
						walls[index] = 0;	
						}
				}  			
				else{
					in_var = index;
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X);
					if(row == 0){
						visited[0][column] = 1;
						walls[index] = 0;
					}
					else{
						visited[MAZELENGTH/DIV_DEGREE_Y-1][column] = 1;
						walls[index] = 0;

			}
				}

	
			}
	    	
	    		break;

	    }
}
}

void xc_prim_child_root(unsigned rank, chanend com_channel){

	// matrix to store walls
	// array to store visited cells
	// variable to keep track of the number of visited cells

	unsigned walls_touched[(MAZEWIDTH/DIV_DEGREE_X+1) * (MAZELENGTH/DIV_DEGREE_Y) + (MAZELENGTH/DIV_DEGREE_Y + 1) * (MAZELENGTH/DIV_DEGREE_X)];
	unsigned mazesize = (MAZEWIDTH/DIV_DEGREE_X) * (MAZELENGTH/DIV_DEGREE_Y);
	unsigned num_walls = (MAZEWIDTH/DIV_DEGREE_X+1) * (MAZELENGTH/DIV_DEGREE_Y) + (MAZELENGTH/DIV_DEGREE_Y + 1) * (MAZELENGTH/DIV_DEGREE_X);
	unsigned index;
	unsigned foo,row,column,in_var,response;
	// unsigned print_ids[6];
	unsigned num_touched =0;
	unsigned num_touched_limit = 10;
	
	channel siblingCommunicationChannel_north;
	channel siblingCommunicationChannel_east;
	channel siblingCommunicationChannel_south;
	channel siblingCommunicationChannel_west;

	// print_ids[5] = get_local_tile_id();
	 
//	printmany(6,print_ids);

	if(rank >= DIV_DEGREE_X) siblingCommunicationChannel_north = client_allocatenewlocalchannel(0);
	if(rank % DIV_DEGREE_X != DIV_DEGREE_X - 1) siblingCommunicationChannel_east = client_allocatenewlocalchannel(1);
	if(rank/DIV_DEGREE_X != DIV_DEGREE_Y - 1) siblingCommunicationChannel_south = client_allocatenewlocalchannel(2);
	if(rank % DIV_DEGREE_X != 0) siblingCommunicationChannel_west = client_allocatenewlocalchannel(3);

/*	print_ids[0] = rank;
	print_ids[1] = siblingCommunicationChannel_north;
	print_ids[2] = siblingCommunicationChannel_east;
	print_ids[3] = siblingCommunicationChannel_south;
	print_ids[4] = siblingCommunicationChannel_west;
*/
	//printmany(5,print_ids);


	if(rank >= DIV_DEGREE_X) channellisten(siblingCommunicationChannel_north);
	if(rank % DIV_DEGREE_X != 0) channellisten(siblingCommunicationChannel_west);
	if(rank % DIV_DEGREE_X != DIV_DEGREE_X - 1) channellisten(siblingCommunicationChannel_east);
	if(rank/DIV_DEGREE_X != DIV_DEGREE_Y - 1) channellisten(siblingCommunicationChannel_south);

	srand(1);

	for(int i=0; i<num_walls;i++){
		walls_touched[i] = 0;
	}

	while (num_touched < num_touched_limit){

	index = rand() % num_walls;
		while(1){
			if(walls_touched[index] == 1){
				if(index<num_walls-1)
					index++;
				else
					index = 0;
			}else
			{
				if(index >=((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X)){
					in_var = index - ((MAZELENGTH/DIV_DEGREE_Y)+1)*(MAZEWIDTH/DIV_DEGREE_X);
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X + 1);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X + 1);
					if(column !=0 && column != DIV_DEGREE_X){
						com_channel <: 1;
						com_channel <: index;
						break;
					
					}
					else{
						com_channel <: 2;
						com_channel <: index;
						com_channel :> foo;
						if(foo == 0){
							if(column > 0){
								channelSendWord(siblingCommunicationChannel_east,index-MAZEWIDTH/DIV_DEGREE_X);
								response = channelReceiveWord(siblingCommunicationChannel_east);
								if(response){
									com_channel <: 3;
									com_channel <: index;
									break;
								}else
									break;			
							}else{
								channelSendWord(siblingCommunicationChannel_west,index + MAZEWIDTH/DIV_DEGREE_X);
								response = channelReceiveWord(siblingCommunicationChannel_west);
								if(response){
									com_channel <: 3;
									com_channel <: index;
									break;
									}
								else
									break;	}
						}else
							break;
					}  			
				}else{
					in_var = index;
					row = in_var/(MAZEWIDTH/DIV_DEGREE_X);
	    				column = in_var % (MAZEWIDTH/DIV_DEGREE_X);
					if(row !=0 && row != MAZELENGTH/DIV_DEGREE_Y){
						com_channel <: 1;
						com_channel <: index;
						break;	
					}
					else{
						com_channel <: 2;
						com_channel <: index ;
						com_channel :> foo;
						if(foo == 0){
							if(row > 0){
								channelSendWord(siblingCommunicationChannel_south,index-(MAZEWIDTH/DIV_DEGREE_X)*(MAZELENGTH/DIV_DEGREE_Y));
								response = channelReceiveWord(siblingCommunicationChannel_south);
								if(response){
									com_channel <: 3;
									com_channel <: index;
									break;
									}
								else
									break;			
							}else{ 
								channelSendWord(siblingCommunicationChannel_north,index +(MAZEWIDTH/DIV_DEGREE_X)*(MAZELENGTH/DIV_DEGREE_Y));
								response = channelReceiveWord(siblingCommunicationChannel_north);
								if(response){
									com_channel <: 3;
									com_channel <: index;
									break;
								}
								else
									break;	
						}
						}else
							break;

				}	
				}
}
}
}
}




/*
select sync_edge(unsigned in_var, channel listenchannel, unsigned visited[][MAZELENGTH],unsigned walls_touched[]){

	case listenchannel :> in_var:
		if(in_var > ((MAZEWIDTH/div_degree)+1)*(MAZELENGTH/div_degree)){
			in_var = in_var - ((MAZEWIDTH/div_degree)+1)*(MAZELENGTH/div_degree);
			row = in_var/(MAZEWIDTH/div_degree + 1);
			column = in_var % (MAZEWIDTH/div_degree + 1);
			if(row == MAZELENGTH/div_degree + 1){
				if(visited[row-1][column]==1)
					channelSendWord(listenchannel,(unsigned) 0);
				else{
					visited[row-1][column]=1;
					in_var = in_var + ((MAZEWIDTH/div_degree)+1)*(MAZELENGTH/div_degree);
					walls_touched[in_var]=1;
					channelSendWord(listenchannel,(unsigned) 1);
				}
			}else{
				if(visited[row][column]==1)
					channelSendWord(listenchannel,(unsigned) 0);
				else{
					visited[row][column]=1;
					in_var = in_var + ((MAZEWIDTH/div_degree)+1)*(MAZELENGTH/div_degree);
					walls_touched[in_var]=1;
					channelSendWord(listenchannel,(unsigned) 1);
				}
			}
		}
			else{
				row = in_var/(MAZEWIDTH/div_degree);
				column = in_var % (MAZEWIDTH/div_degree);
			if(column== MAZEWIDTH/div_degree + 1){
				if(visited[row][column-1]==1)
					channelSendWord(listenchannel,(unsigned) 0);
					else{
						visited[row][column-1]=1;
						walls_touched[in_var]=1;
						channelSendWord(listenchannel,(unsigned) 1);
					}
				} else{
					if(visited[row][column]==1)
						channelSendWord(listenchannel,(unsigned) 0);
					else{
						visited[row][column]=1;
						walls_touched[in_var]=1;
						channelSendWord(listenchannel,(unsigned) 1);
					}

				}
			}
		break;
}
*/
